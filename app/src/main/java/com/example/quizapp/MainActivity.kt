package com.example.quizapp

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ExitToApp
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.quizapp.ui.theme.QuizAppTheme
import io.github.jan.supabase.SupabaseClient
import io.github.jan.supabase.createSupabaseClient
import io.github.jan.supabase.postgrest.Postgrest
import io.github.jan.supabase.postgrest.postgrest
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.serialization.Serializable


/*
 * Supabase RLS Policy to be applied in Supabase SQL Editor:
  CREATE POLICY "Allow public inserts for quiz scores"
  ON "public"."quiz_scores"
  AS PERMISSIVE
  FOR INSERT
  TO public
  USING (true)
  WITH CHECK (
      uid IS NOT NULL AND
      score >= 0
 );
 *
 Table schema:
  CREATE TABLE public.quiz_scores (
      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      uid TEXT NOT NULL,
      score INT NOT NULL
  );
 */

val supabase: SupabaseClient = createSupabaseClient(
    supabaseUrl = "https://vqrmpufgwnbjafcbctwj.supabase.co",
    supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZxcm1wdWZnd25iamFmY2JjdHdqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMwNjcyNjQsImV4cCI6MjA1ODY0MzI2NH0.VdpQmWjjpoXWjGOT-TgzpVdUpgGyg0jFF2BVnrb1bHc"
) {
    install(Postgrest)
}

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            QuizAppTheme {
                Surface(modifier = Modifier.fillMaxSize()) {
                    AppNavigator()
                }
            }
        }
    }
}

@Composable
fun AppNavigator() {

    var showSplash by remember { mutableStateOf(true) }
    var userUid by remember { mutableStateOf<String?>(null) }
    var restartQuiz by remember { mutableStateOf(false) }
    val quizViewModel = remember(userUid, restartQuiz) { userUid?.let { QuizViewModel(it) } }

    LaunchedEffect(Unit) {
        delay(2000)
        showSplash = false
    }

    when {
        showSplash -> SplashScreen()
        userUid == null -> LoginScreen { uid ->
            userUid = uid
        }
        quizViewModel != null -> QuizScreen(
            viewModel = quizViewModel,
            onRetry = { restartQuiz = !restartQuiz },
            onExit = { userUid = null }
        )
        else -> LoginScreen { uid -> userUid = uid }
    }
}

@Composable
fun SplashScreen() {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Brush.verticalGradient(colors = listOf(Color.Blue, Color.Cyan))),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = "Welcome to QuizApp!",
            style = MaterialTheme.typography.headlineLarge,
            color = Color.White
        )
    }
}

@Composable
fun LoginScreen(onLoginSuccess: (String) -> Unit) {
    var uid by remember { mutableStateOf(TextFieldValue()) }
    var isLoading by remember { mutableStateOf(false) }
    var triggerLogin by remember { mutableStateOf(false) }

    // Trigger login after 4 seconds when the button is clicked
    LaunchedEffect(triggerLogin) {
        if (triggerLogin) {
            delay(4000)
            isLoading = false
            onLoginSuccess(uid.text)
            triggerLogin = false
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Brush.linearGradient(colors = listOf(Color(0xFF6A11CB), Color(0xFF2575FC)))),
        contentAlignment = Alignment.Center
    ) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(32.dp),
            shape = RoundedCornerShape(16.dp),
            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White)
        ) {
            Column(
                modifier = Modifier.padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "Enter UID",
                    style = MaterialTheme.typography.headlineMedium,
                    color = Color(0xFF6A11CB)
                )
                Spacer(modifier = Modifier.height(16.dp))
                TextField(
                    value = uid,
                    onValueChange = { uid = it },
                    modifier = Modifier.fillMaxWidth(),
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),
                    label = { Text("UID") }
                )
                Spacer(modifier = Modifier.height(16.dp))
                Button(
                    onClick = {
                        if (uid.text.isNotEmpty() && !isLoading) {
                            isLoading = true
                            triggerLogin = true
                        }
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .shadow(8.dp, shape = RoundedCornerShape(50))
                ) {
                    if (isLoading) {
                        CircularProgressIndicator(color = Color.White, modifier = Modifier.size(24.dp))
                    } else {
                        Text(text = "Login")
                    }
                }
            }
        }
    }
}

@Composable
fun QuizScreen(viewModel: QuizViewModel, onRetry: () -> Unit, onExit: () -> Unit) {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(MaterialTheme.colorScheme.background)
            .padding(16.dp)
    ) {
        Column(
            modifier = Modifier.fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp),
                horizontalArrangement = Arrangement.End
            ) {
                IconButton(onClick = onExit) {
                    Icon(
                        imageVector = Icons.Filled.ExitToApp,
                        contentDescription = "Exit",
                        tint = Color.Red,
                        modifier = Modifier.size(28.dp)
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            if (viewModel.isQuizFinished) {
                ScoreScreen(viewModel.score, onRetry)
            } else {
                Card(
                    shape = RoundedCornerShape(16.dp),
                    elevation = CardDefaults.elevatedCardElevation(8.dp),
                    colors = CardDefaults.cardColors(MaterialTheme.colorScheme.surface),
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp)
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = viewModel.getCurrentQuestion()?.text ?: "",
                            style = MaterialTheme.typography.headlineSmall,
                            fontWeight = FontWeight.Bold,
                            textAlign = TextAlign.Center,
                            color = MaterialTheme.colorScheme.primary
                        )

                        Spacer(modifier = Modifier.height(16.dp))

                        viewModel.getCurrentQuestion()?.options?.forEachIndexed { index, answer ->
                            Box(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .padding(vertical = 6.dp)
                                    .height(48.dp)
                                    .background(
                                        brush = Brush.horizontalGradient(
                                            listOf(Color(0xFF6A11CB), Color(0xFF2575FC))
                                        ),
                                        shape = RoundedCornerShape(12.dp)
                                    ),
                                contentAlignment = Alignment.Center
                            ) {
                                Button(
                                    onClick = { viewModel.answerQuestion(index) },
                                    colors = ButtonDefaults.buttonColors(
                                        containerColor = Color.Transparent // Transparent to show gradient
                                    ),
                                    shape = RoundedCornerShape(12.dp),
                                    modifier = Modifier.fillMaxSize()
                                ) {
                                    Text(text = answer, fontSize = 16.sp, color = Color.White)
                                }
                            }
                        }
                    }
                }

                Spacer(modifier = Modifier.height(16.dp))

                Text(
                    text = "Score: ${viewModel.score}",
                    style = MaterialTheme.typography.bodyLarge,
                    fontWeight = FontWeight.Medium,
                    color = MaterialTheme.colorScheme.secondary
                )
            }
        }
    }
}


@Composable
fun ScoreScreen(score: Int, onRetry: () -> Unit) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(text = "Quiz Completed!", style = MaterialTheme.typography.headlineMedium)
        Spacer(modifier = Modifier.height(16.dp))
        Text(text = "Your Score: $score", style = MaterialTheme.typography.headlineLarge)
        Spacer(modifier = Modifier.height(16.dp))
        Button(onClick = onRetry) {
            Text(text = "Retry")
        }
    }
}

@Serializable
data class QuizScore(
    val uid: String,
    val score: Int
)

class QuizViewModel(private val uid: String) : ViewModel() {
    private val questions = listOf(
        Question("Capital of India?", listOf("Patna", "Delhi", "UP", "Bihar"), 1),
        Question("2 + 2?", listOf("3", "4", "5", "6"), 1),
        Question("Who discovered gravity?", listOf("Einstein", "Newton", "Galileo", "Tesla"), 1),
        Question("Which is the longest river?", listOf("Amazon", "Nile", "Ganga", "Yamuna"), 1),
        Question("What is the square root of 64?", listOf("6", "7", "8", "9"), 2),
        Question("Which gas is most abundant in Earth's atmosphere?", listOf("Oxygen", "Hydrogen", "Nitrogen", "Carbon Dioxide"), 2),
        Question("Fastest land animal?", listOf("Lion", "Cheetah", "Tiger", "Leopard"), 1),
        Question("Which is the smallest planet?", listOf("Mars", "Mercury", "Venus", "Pluto"), 1)
    )

    var currentQuestionIndex by mutableIntStateOf(0)
        private set
    var score by mutableIntStateOf(0)
        private set
    var isQuizFinished by mutableStateOf(false)
        private set

    fun getCurrentQuestion(): Question? = questions.getOrNull(currentQuestionIndex)

    fun answerQuestion(selectedIndex: Int) {
        getCurrentQuestion()?.let { question ->
            if (selectedIndex == question.correctAnswer) score++
            currentQuestionIndex++
            if (currentQuestionIndex >= questions.size) {
                isQuizFinished = true
                sendScoreToSupabase()
            }
        }
    }

    private fun sendScoreToSupabase() {
        viewModelScope.launch {
            try {
                val quizScore = QuizScore(uid = uid, score = score)
                supabase.postgrest["quiz_scores"].insert(quizScore)
                Log.d("QuizViewModel", "Score successfully sent to Supabase: $score for uid: $uid")
            } catch (e: Exception) {
                Log.e("QuizViewModel", "Failed to send score to Supabase: ${e.message}", e)
            }
        }
    }
}

data class Question(
    val text: String,
    val options: List<String>,
    val correctAnswer: Int
)